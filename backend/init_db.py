#!/usr/bin/env python3

from sqlalchemy import create_engine
from app.database import Base, engine
from app.models.database_models import Employee, Transport, Robots, Shift, Crew
from app.config import settings

def init_database():
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

def create_sample_data():
    from sqlalchemy.orm import sessionmaker
    from datetime import datetime, timedelta
    
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        crew = Crew(
            name="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            max_members=5,
            owner_id=1
        )
        db.add(crew)
        db.flush()
        
        employees = [
            Employee(
                firstname="–î–∞–Ω–∏–ª",
                lastname="–í–æ–ª–∫–æ–≤",
                patronymic="–°–µ—Ä–≥–µ–µ–≤–∏—á",
                tg="@steg1",
                staff="steg1",
                body="@nakito-own",
                drive=True,
                parking=True,
                telemedicine=True,
                attorney=False,
                acces_to_auto_vc=False,
                crew=crew.id
            ),
            Employee(
                firstname="–ò–ª—å—è",
                lastname="–í–æ—Ä–æ–Ω–æ–≤",
                patronymic="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
                tg="@isvoronov",
                staff="isvoronov",
                body="@nakito-own",
                drive=False,
                parking=True,
                telemedicine=True,
                attorney=True,
                acces_to_auto_vc=True,
                crew=crew.id
            )
        ]
        
        for emp in employees:
            db.add(emp)
        
        transports = [
            Transport(
                name="Modris",
                model="Citroen Berlingo",
                gov_number="–ê123–ë–í77",
                carsharing=False,
                corporate=True,
                auto_vc=False
            ),
            Transport(
                name="–ö–∞—Ä—à–µ—Ä–∏–Ω–≥",
                model="Sollers Atlant",
                gov_number="–í456–ì–î77",
                carsharing=True,
                corporate=False,
                auto_vc=False
            )
        ]
        
        for transport in transports:
            db.add(transport)
        
        robots = [
            Robots(
                name=188,
                series=1,
                has_blockers=False
            ),
            Robots(
                name=295,
                series=2,
                has_blockers=False
            )
        ]
        
        for robot in robots:
            db.add(robot)
        
        db.flush()
        
        now = datetime.now()
        shifts = [
            Shift(
                executor="–î–∞–Ω–∏–ª –í–æ–ª–∫–æ–≤",
                robot=robots[0].id,
                transport_name="Modris",
                time_start=now,
                time_end=now + timedelta(hours=12),
                route=True,
                carpet=False,
                geojson={
                    "type": "FeatureCollection",
                    "features": [
                        {
                            "type": "Feature",
                            "geometry": {
                                "type": "Point",
                                "coordinates": [37.6173, 55.7558]
                            },
                            "properties": {
                                "name": "–ú–æ—Å–∫–≤–∞"
                            }
                        }
                    ]
                }
            )
        ]
        
        for shift in shifts:
            db.add(shift)
        
        db.commit()
        print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {settings.DATABASE_URL}")
    
    try:
        init_database()
        create_sample_data()
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)
